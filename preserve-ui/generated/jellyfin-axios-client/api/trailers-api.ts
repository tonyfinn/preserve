/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BaseItemDtoQueryResult } from '../model';
/**
 * TrailersApi - axios parameter creator
 * @export
 */
export const TrailersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Finds movies and trailers similar to a given trailer.
         * @param {string} [userId] The user id.
         * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
         * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
         * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
         * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
         * @param {boolean} [hasTrailer] Optional filter by items with trailers.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {number} [parentIndexNumber] Optional filter by parent index number.
         * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating.
         * @param {boolean} [isHd] Optional filter by items that are HD or not.
         * @param {boolean} [is4K] Optional filter by items that are 4K or not.
         * @param {string} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
         * @param {string} [excludeLocationTypes] Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimeted.
         * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
         * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [minCriticRating] Optional filter by minimum critic rating.
         * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO.
         * @param {string} [minDateLastSaved] Optional. The minimum last saved date. Format &#x3D; ISO.
         * @param {string} [minDateLastSavedForUser] Optional. The minimum last saved date for the current user. Format &#x3D; ISO.
         * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO.
         * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
         * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
         * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
         * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
         * @param {string} [excludeItemIds] Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false.
         * @param {string} [searchTerm] Optional. Filter based on a search term.
         * @param {string} [sortOrder] Sort Order - Ascending,Descending.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
         * @param {string} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {string} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {string} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
         * @param {string} [sortBy] Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
         * @param {string} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
         * @param {string} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
         * @param {string} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
         * @param {string} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {string} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person id.
         * @param {string} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {string} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
         * @param {string} [artists] Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimeted.
         * @param {string} [excludeArtistIds] Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimeted.
         * @param {string} [artistIds] Optional. If specified, results will be filtered to include only those containing the specified artist id.
         * @param {string} [albumArtistIds] Optional. If specified, results will be filtered to include only those containing the specified album artist id.
         * @param {string} [contributingArtistIds] Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
         * @param {string} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
         * @param {string} [albumIds] Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimeted.
         * @param {string} [ids] Optional. If specific items are needed, specify a list of item id\&#39;s to retrieve. This allows multiple, comma delimited.
         * @param {string} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
         * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [isLocked] Optional filter by items that are locked.
         * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders.
         * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings.
         * @param {boolean} [collapseBoxSetItems] Whether or not to hide items behind their boxsets.
         * @param {number} [minWidth] Optional. Filter by the minimum width of the item.
         * @param {number} [minHeight] Optional. Filter by the minimum height of the item.
         * @param {number} [maxWidth] Optional. Filter by the maximum width of the item.
         * @param {number} [maxHeight] Optional. Filter by the maximum height of the item.
         * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
         * @param {string} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimeted.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {string} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimeted.
         * @param {string} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimeted.
         * @param {boolean} [enableTotalRecordCount] Optional. Enable the total record count.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailers: async (userId?: string, maxOfficialRating?: string, hasThemeSong?: boolean, hasThemeVideo?: boolean, hasSubtitles?: boolean, hasSpecialFeature?: boolean, hasTrailer?: boolean, adjacentTo?: string, parentIndexNumber?: number, hasParentalRating?: boolean, isHd?: boolean, is4K?: boolean, locationTypes?: string, excludeLocationTypes?: string, isMissing?: boolean, isUnaired?: boolean, minCommunityRating?: number, minCriticRating?: number, minPremiereDate?: string, minDateLastSaved?: string, minDateLastSavedForUser?: string, maxPremiereDate?: string, hasOverview?: boolean, hasImdbId?: boolean, hasTmdbId?: boolean, hasTvdbId?: boolean, excludeItemIds?: string, startIndex?: number, limit?: number, recursive?: boolean, searchTerm?: string, sortOrder?: string, parentId?: string, fields?: string, excludeItemTypes?: string, filters?: string, isFavorite?: boolean, mediaTypes?: string, imageTypes?: string, sortBy?: string, isPlayed?: boolean, genres?: string, officialRatings?: string, tags?: string, years?: string, enableUserData?: boolean, imageTypeLimit?: number, enableImageTypes?: string, person?: string, personIds?: string, personTypes?: string, studios?: string, artists?: string, excludeArtistIds?: string, artistIds?: string, albumArtistIds?: string, contributingArtistIds?: string, albums?: string, albumIds?: string, ids?: string, videoTypes?: string, minOfficialRating?: string, isLocked?: boolean, isPlaceHolder?: boolean, hasOfficialRating?: boolean, collapseBoxSetItems?: boolean, minWidth?: number, minHeight?: number, maxWidth?: number, maxHeight?: number, is3D?: boolean, seriesStatus?: string, nameStartsWithOrGreater?: string, nameStartsWith?: string, nameLessThan?: string, studioIds?: string, genreIds?: string, enableTotalRecordCount?: boolean, enableImages?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Trailers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-Emby-Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-Emby-Authorization"] = localVarApiKeyValue;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (maxOfficialRating !== undefined) {
                localVarQueryParameter['maxOfficialRating'] = maxOfficialRating;
            }

            if (hasThemeSong !== undefined) {
                localVarQueryParameter['hasThemeSong'] = hasThemeSong;
            }

            if (hasThemeVideo !== undefined) {
                localVarQueryParameter['hasThemeVideo'] = hasThemeVideo;
            }

            if (hasSubtitles !== undefined) {
                localVarQueryParameter['hasSubtitles'] = hasSubtitles;
            }

            if (hasSpecialFeature !== undefined) {
                localVarQueryParameter['hasSpecialFeature'] = hasSpecialFeature;
            }

            if (hasTrailer !== undefined) {
                localVarQueryParameter['hasTrailer'] = hasTrailer;
            }

            if (adjacentTo !== undefined) {
                localVarQueryParameter['adjacentTo'] = adjacentTo;
            }

            if (parentIndexNumber !== undefined) {
                localVarQueryParameter['parentIndexNumber'] = parentIndexNumber;
            }

            if (hasParentalRating !== undefined) {
                localVarQueryParameter['hasParentalRating'] = hasParentalRating;
            }

            if (isHd !== undefined) {
                localVarQueryParameter['isHd'] = isHd;
            }

            if (is4K !== undefined) {
                localVarQueryParameter['is4K'] = is4K;
            }

            if (locationTypes !== undefined) {
                localVarQueryParameter['locationTypes'] = locationTypes;
            }

            if (excludeLocationTypes !== undefined) {
                localVarQueryParameter['excludeLocationTypes'] = excludeLocationTypes;
            }

            if (isMissing !== undefined) {
                localVarQueryParameter['isMissing'] = isMissing;
            }

            if (isUnaired !== undefined) {
                localVarQueryParameter['isUnaired'] = isUnaired;
            }

            if (minCommunityRating !== undefined) {
                localVarQueryParameter['minCommunityRating'] = minCommunityRating;
            }

            if (minCriticRating !== undefined) {
                localVarQueryParameter['minCriticRating'] = minCriticRating;
            }

            if (minPremiereDate !== undefined) {
                localVarQueryParameter['minPremiereDate'] = (minPremiereDate as any instanceof Date) ?
                    (minPremiereDate as any).toISOString() :
                    minPremiereDate;
            }

            if (minDateLastSaved !== undefined) {
                localVarQueryParameter['minDateLastSaved'] = (minDateLastSaved as any instanceof Date) ?
                    (minDateLastSaved as any).toISOString() :
                    minDateLastSaved;
            }

            if (minDateLastSavedForUser !== undefined) {
                localVarQueryParameter['minDateLastSavedForUser'] = (minDateLastSavedForUser as any instanceof Date) ?
                    (minDateLastSavedForUser as any).toISOString() :
                    minDateLastSavedForUser;
            }

            if (maxPremiereDate !== undefined) {
                localVarQueryParameter['maxPremiereDate'] = (maxPremiereDate as any instanceof Date) ?
                    (maxPremiereDate as any).toISOString() :
                    maxPremiereDate;
            }

            if (hasOverview !== undefined) {
                localVarQueryParameter['hasOverview'] = hasOverview;
            }

            if (hasImdbId !== undefined) {
                localVarQueryParameter['hasImdbId'] = hasImdbId;
            }

            if (hasTmdbId !== undefined) {
                localVarQueryParameter['hasTmdbId'] = hasTmdbId;
            }

            if (hasTvdbId !== undefined) {
                localVarQueryParameter['hasTvdbId'] = hasTvdbId;
            }

            if (excludeItemIds !== undefined) {
                localVarQueryParameter['excludeItemIds'] = excludeItemIds;
            }

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recursive !== undefined) {
                localVarQueryParameter['recursive'] = recursive;
            }

            if (searchTerm !== undefined) {
                localVarQueryParameter['searchTerm'] = searchTerm;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['parentId'] = parentId;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (excludeItemTypes !== undefined) {
                localVarQueryParameter['excludeItemTypes'] = excludeItemTypes;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (isFavorite !== undefined) {
                localVarQueryParameter['isFavorite'] = isFavorite;
            }

            if (mediaTypes !== undefined) {
                localVarQueryParameter['mediaTypes'] = mediaTypes;
            }

            if (imageTypes !== undefined) {
                localVarQueryParameter['imageTypes'] = imageTypes;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (isPlayed !== undefined) {
                localVarQueryParameter['isPlayed'] = isPlayed;
            }

            if (genres !== undefined) {
                localVarQueryParameter['genres'] = genres;
            }

            if (officialRatings !== undefined) {
                localVarQueryParameter['officialRatings'] = officialRatings;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (years !== undefined) {
                localVarQueryParameter['years'] = years;
            }

            if (enableUserData !== undefined) {
                localVarQueryParameter['enableUserData'] = enableUserData;
            }

            if (imageTypeLimit !== undefined) {
                localVarQueryParameter['imageTypeLimit'] = imageTypeLimit;
            }

            if (enableImageTypes !== undefined) {
                localVarQueryParameter['enableImageTypes'] = enableImageTypes;
            }

            if (person !== undefined) {
                localVarQueryParameter['person'] = person;
            }

            if (personIds !== undefined) {
                localVarQueryParameter['personIds'] = personIds;
            }

            if (personTypes !== undefined) {
                localVarQueryParameter['personTypes'] = personTypes;
            }

            if (studios !== undefined) {
                localVarQueryParameter['studios'] = studios;
            }

            if (artists !== undefined) {
                localVarQueryParameter['artists'] = artists;
            }

            if (excludeArtistIds !== undefined) {
                localVarQueryParameter['excludeArtistIds'] = excludeArtistIds;
            }

            if (artistIds !== undefined) {
                localVarQueryParameter['artistIds'] = artistIds;
            }

            if (albumArtistIds !== undefined) {
                localVarQueryParameter['albumArtistIds'] = albumArtistIds;
            }

            if (contributingArtistIds !== undefined) {
                localVarQueryParameter['contributingArtistIds'] = contributingArtistIds;
            }

            if (albums !== undefined) {
                localVarQueryParameter['albums'] = albums;
            }

            if (albumIds !== undefined) {
                localVarQueryParameter['albumIds'] = albumIds;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (videoTypes !== undefined) {
                localVarQueryParameter['videoTypes'] = videoTypes;
            }

            if (minOfficialRating !== undefined) {
                localVarQueryParameter['minOfficialRating'] = minOfficialRating;
            }

            if (isLocked !== undefined) {
                localVarQueryParameter['isLocked'] = isLocked;
            }

            if (isPlaceHolder !== undefined) {
                localVarQueryParameter['isPlaceHolder'] = isPlaceHolder;
            }

            if (hasOfficialRating !== undefined) {
                localVarQueryParameter['hasOfficialRating'] = hasOfficialRating;
            }

            if (collapseBoxSetItems !== undefined) {
                localVarQueryParameter['collapseBoxSetItems'] = collapseBoxSetItems;
            }

            if (minWidth !== undefined) {
                localVarQueryParameter['minWidth'] = minWidth;
            }

            if (minHeight !== undefined) {
                localVarQueryParameter['minHeight'] = minHeight;
            }

            if (maxWidth !== undefined) {
                localVarQueryParameter['maxWidth'] = maxWidth;
            }

            if (maxHeight !== undefined) {
                localVarQueryParameter['maxHeight'] = maxHeight;
            }

            if (is3D !== undefined) {
                localVarQueryParameter['is3D'] = is3D;
            }

            if (seriesStatus !== undefined) {
                localVarQueryParameter['seriesStatus'] = seriesStatus;
            }

            if (nameStartsWithOrGreater !== undefined) {
                localVarQueryParameter['nameStartsWithOrGreater'] = nameStartsWithOrGreater;
            }

            if (nameStartsWith !== undefined) {
                localVarQueryParameter['nameStartsWith'] = nameStartsWith;
            }

            if (nameLessThan !== undefined) {
                localVarQueryParameter['nameLessThan'] = nameLessThan;
            }

            if (studioIds !== undefined) {
                localVarQueryParameter['studioIds'] = studioIds;
            }

            if (genreIds !== undefined) {
                localVarQueryParameter['genreIds'] = genreIds;
            }

            if (enableTotalRecordCount !== undefined) {
                localVarQueryParameter['enableTotalRecordCount'] = enableTotalRecordCount;
            }

            if (enableImages !== undefined) {
                localVarQueryParameter['enableImages'] = enableImages;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrailersApi - functional programming interface
 * @export
 */
export const TrailersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Finds movies and trailers similar to a given trailer.
         * @param {string} [userId] The user id.
         * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
         * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
         * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
         * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
         * @param {boolean} [hasTrailer] Optional filter by items with trailers.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {number} [parentIndexNumber] Optional filter by parent index number.
         * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating.
         * @param {boolean} [isHd] Optional filter by items that are HD or not.
         * @param {boolean} [is4K] Optional filter by items that are 4K or not.
         * @param {string} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
         * @param {string} [excludeLocationTypes] Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimeted.
         * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
         * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [minCriticRating] Optional filter by minimum critic rating.
         * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO.
         * @param {string} [minDateLastSaved] Optional. The minimum last saved date. Format &#x3D; ISO.
         * @param {string} [minDateLastSavedForUser] Optional. The minimum last saved date for the current user. Format &#x3D; ISO.
         * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO.
         * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
         * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
         * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
         * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
         * @param {string} [excludeItemIds] Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false.
         * @param {string} [searchTerm] Optional. Filter based on a search term.
         * @param {string} [sortOrder] Sort Order - Ascending,Descending.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
         * @param {string} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {string} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {string} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
         * @param {string} [sortBy] Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
         * @param {string} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
         * @param {string} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
         * @param {string} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
         * @param {string} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {string} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person id.
         * @param {string} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {string} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
         * @param {string} [artists] Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimeted.
         * @param {string} [excludeArtistIds] Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimeted.
         * @param {string} [artistIds] Optional. If specified, results will be filtered to include only those containing the specified artist id.
         * @param {string} [albumArtistIds] Optional. If specified, results will be filtered to include only those containing the specified album artist id.
         * @param {string} [contributingArtistIds] Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
         * @param {string} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
         * @param {string} [albumIds] Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimeted.
         * @param {string} [ids] Optional. If specific items are needed, specify a list of item id\&#39;s to retrieve. This allows multiple, comma delimited.
         * @param {string} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
         * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [isLocked] Optional filter by items that are locked.
         * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders.
         * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings.
         * @param {boolean} [collapseBoxSetItems] Whether or not to hide items behind their boxsets.
         * @param {number} [minWidth] Optional. Filter by the minimum width of the item.
         * @param {number} [minHeight] Optional. Filter by the minimum height of the item.
         * @param {number} [maxWidth] Optional. Filter by the maximum width of the item.
         * @param {number} [maxHeight] Optional. Filter by the maximum height of the item.
         * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
         * @param {string} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimeted.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {string} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimeted.
         * @param {string} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimeted.
         * @param {boolean} [enableTotalRecordCount] Optional. Enable the total record count.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrailers(userId?: string, maxOfficialRating?: string, hasThemeSong?: boolean, hasThemeVideo?: boolean, hasSubtitles?: boolean, hasSpecialFeature?: boolean, hasTrailer?: boolean, adjacentTo?: string, parentIndexNumber?: number, hasParentalRating?: boolean, isHd?: boolean, is4K?: boolean, locationTypes?: string, excludeLocationTypes?: string, isMissing?: boolean, isUnaired?: boolean, minCommunityRating?: number, minCriticRating?: number, minPremiereDate?: string, minDateLastSaved?: string, minDateLastSavedForUser?: string, maxPremiereDate?: string, hasOverview?: boolean, hasImdbId?: boolean, hasTmdbId?: boolean, hasTvdbId?: boolean, excludeItemIds?: string, startIndex?: number, limit?: number, recursive?: boolean, searchTerm?: string, sortOrder?: string, parentId?: string, fields?: string, excludeItemTypes?: string, filters?: string, isFavorite?: boolean, mediaTypes?: string, imageTypes?: string, sortBy?: string, isPlayed?: boolean, genres?: string, officialRatings?: string, tags?: string, years?: string, enableUserData?: boolean, imageTypeLimit?: number, enableImageTypes?: string, person?: string, personIds?: string, personTypes?: string, studios?: string, artists?: string, excludeArtistIds?: string, artistIds?: string, albumArtistIds?: string, contributingArtistIds?: string, albums?: string, albumIds?: string, ids?: string, videoTypes?: string, minOfficialRating?: string, isLocked?: boolean, isPlaceHolder?: boolean, hasOfficialRating?: boolean, collapseBoxSetItems?: boolean, minWidth?: number, minHeight?: number, maxWidth?: number, maxHeight?: number, is3D?: boolean, seriesStatus?: string, nameStartsWithOrGreater?: string, nameStartsWith?: string, nameLessThan?: string, studioIds?: string, genreIds?: string, enableTotalRecordCount?: boolean, enableImages?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseItemDtoQueryResult>> {
            const localVarAxiosArgs = await TrailersApiAxiosParamCreator(configuration).getTrailers(userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TrailersApi - factory interface
 * @export
 */
export const TrailersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Finds movies and trailers similar to a given trailer.
         * @param {string} [userId] The user id.
         * @param {string} [maxOfficialRating] Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [hasThemeSong] Optional filter by items with theme songs.
         * @param {boolean} [hasThemeVideo] Optional filter by items with theme videos.
         * @param {boolean} [hasSubtitles] Optional filter by items with subtitles.
         * @param {boolean} [hasSpecialFeature] Optional filter by items with special features.
         * @param {boolean} [hasTrailer] Optional filter by items with trailers.
         * @param {string} [adjacentTo] Optional. Return items that are siblings of a supplied item.
         * @param {number} [parentIndexNumber] Optional filter by parent index number.
         * @param {boolean} [hasParentalRating] Optional filter by items that have or do not have a parental rating.
         * @param {boolean} [isHd] Optional filter by items that are HD or not.
         * @param {boolean} [is4K] Optional filter by items that are 4K or not.
         * @param {string} [locationTypes] Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
         * @param {string} [excludeLocationTypes] Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimeted.
         * @param {boolean} [isMissing] Optional filter by items that are missing episodes or not.
         * @param {boolean} [isUnaired] Optional filter by items that are unaired episodes or not.
         * @param {number} [minCommunityRating] Optional filter by minimum community rating.
         * @param {number} [minCriticRating] Optional filter by minimum critic rating.
         * @param {string} [minPremiereDate] Optional. The minimum premiere date. Format &#x3D; ISO.
         * @param {string} [minDateLastSaved] Optional. The minimum last saved date. Format &#x3D; ISO.
         * @param {string} [minDateLastSavedForUser] Optional. The minimum last saved date for the current user. Format &#x3D; ISO.
         * @param {string} [maxPremiereDate] Optional. The maximum premiere date. Format &#x3D; ISO.
         * @param {boolean} [hasOverview] Optional filter by items that have an overview or not.
         * @param {boolean} [hasImdbId] Optional filter by items that have an imdb id or not.
         * @param {boolean} [hasTmdbId] Optional filter by items that have a tmdb id or not.
         * @param {boolean} [hasTvdbId] Optional filter by items that have a tvdb id or not.
         * @param {string} [excludeItemIds] Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {boolean} [recursive] When searching within folders, this determines whether or not the search will be recursive. true/false.
         * @param {string} [searchTerm] Optional. Filter based on a search term.
         * @param {string} [sortOrder] Sort Order - Ascending,Descending.
         * @param {string} [parentId] Specify this to localize the search to a specific item or folder. Omit to use the root.
         * @param {string} [fields] Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
         * @param {string} [excludeItemTypes] Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
         * @param {string} [filters] Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
         * @param {boolean} [isFavorite] Optional filter by items that are marked as favorite, or not.
         * @param {string} [mediaTypes] Optional filter by MediaType. Allows multiple, comma delimited.
         * @param {string} [imageTypes] Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
         * @param {string} [sortBy] Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
         * @param {boolean} [isPlayed] Optional filter by items that are played, or not.
         * @param {string} [genres] Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
         * @param {string} [officialRatings] Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
         * @param {string} [tags] Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
         * @param {string} [years] Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
         * @param {boolean} [enableUserData] Optional, include user data.
         * @param {number} [imageTypeLimit] Optional, the max number of images to return, per image type.
         * @param {string} [enableImageTypes] Optional. The image types to include in the output.
         * @param {string} [person] Optional. If specified, results will be filtered to include only those containing the specified person.
         * @param {string} [personIds] Optional. If specified, results will be filtered to include only those containing the specified person id.
         * @param {string} [personTypes] Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
         * @param {string} [studios] Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
         * @param {string} [artists] Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimeted.
         * @param {string} [excludeArtistIds] Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimeted.
         * @param {string} [artistIds] Optional. If specified, results will be filtered to include only those containing the specified artist id.
         * @param {string} [albumArtistIds] Optional. If specified, results will be filtered to include only those containing the specified album artist id.
         * @param {string} [contributingArtistIds] Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
         * @param {string} [albums] Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
         * @param {string} [albumIds] Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimeted.
         * @param {string} [ids] Optional. If specific items are needed, specify a list of item id\&#39;s to retrieve. This allows multiple, comma delimited.
         * @param {string} [videoTypes] Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
         * @param {string} [minOfficialRating] Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
         * @param {boolean} [isLocked] Optional filter by items that are locked.
         * @param {boolean} [isPlaceHolder] Optional filter by items that are placeholders.
         * @param {boolean} [hasOfficialRating] Optional filter by items that have official ratings.
         * @param {boolean} [collapseBoxSetItems] Whether or not to hide items behind their boxsets.
         * @param {number} [minWidth] Optional. Filter by the minimum width of the item.
         * @param {number} [minHeight] Optional. Filter by the minimum height of the item.
         * @param {number} [maxWidth] Optional. Filter by the maximum width of the item.
         * @param {number} [maxHeight] Optional. Filter by the maximum height of the item.
         * @param {boolean} [is3D] Optional filter by items that are 3D, or not.
         * @param {string} [seriesStatus] Optional filter by Series Status. Allows multiple, comma delimeted.
         * @param {string} [nameStartsWithOrGreater] Optional filter by items whose name is sorted equally or greater than a given input string.
         * @param {string} [nameStartsWith] Optional filter by items whose name is sorted equally than a given input string.
         * @param {string} [nameLessThan] Optional filter by items whose name is equally or lesser than a given input string.
         * @param {string} [studioIds] Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimeted.
         * @param {string} [genreIds] Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimeted.
         * @param {boolean} [enableTotalRecordCount] Optional. Enable the total record count.
         * @param {boolean} [enableImages] Optional, include image information in output.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailers(userId?: string, maxOfficialRating?: string, hasThemeSong?: boolean, hasThemeVideo?: boolean, hasSubtitles?: boolean, hasSpecialFeature?: boolean, hasTrailer?: boolean, adjacentTo?: string, parentIndexNumber?: number, hasParentalRating?: boolean, isHd?: boolean, is4K?: boolean, locationTypes?: string, excludeLocationTypes?: string, isMissing?: boolean, isUnaired?: boolean, minCommunityRating?: number, minCriticRating?: number, minPremiereDate?: string, minDateLastSaved?: string, minDateLastSavedForUser?: string, maxPremiereDate?: string, hasOverview?: boolean, hasImdbId?: boolean, hasTmdbId?: boolean, hasTvdbId?: boolean, excludeItemIds?: string, startIndex?: number, limit?: number, recursive?: boolean, searchTerm?: string, sortOrder?: string, parentId?: string, fields?: string, excludeItemTypes?: string, filters?: string, isFavorite?: boolean, mediaTypes?: string, imageTypes?: string, sortBy?: string, isPlayed?: boolean, genres?: string, officialRatings?: string, tags?: string, years?: string, enableUserData?: boolean, imageTypeLimit?: number, enableImageTypes?: string, person?: string, personIds?: string, personTypes?: string, studios?: string, artists?: string, excludeArtistIds?: string, artistIds?: string, albumArtistIds?: string, contributingArtistIds?: string, albums?: string, albumIds?: string, ids?: string, videoTypes?: string, minOfficialRating?: string, isLocked?: boolean, isPlaceHolder?: boolean, hasOfficialRating?: boolean, collapseBoxSetItems?: boolean, minWidth?: number, minHeight?: number, maxWidth?: number, maxHeight?: number, is3D?: boolean, seriesStatus?: string, nameStartsWithOrGreater?: string, nameStartsWith?: string, nameLessThan?: string, studioIds?: string, genreIds?: string, enableTotalRecordCount?: boolean, enableImages?: boolean, options?: any): AxiosPromise<BaseItemDtoQueryResult> {
            return TrailersApiFp(configuration).getTrailers(userId, maxOfficialRating, hasThemeSong, hasThemeVideo, hasSubtitles, hasSpecialFeature, hasTrailer, adjacentTo, parentIndexNumber, hasParentalRating, isHd, is4K, locationTypes, excludeLocationTypes, isMissing, isUnaired, minCommunityRating, minCriticRating, minPremiereDate, minDateLastSaved, minDateLastSavedForUser, maxPremiereDate, hasOverview, hasImdbId, hasTmdbId, hasTvdbId, excludeItemIds, startIndex, limit, recursive, searchTerm, sortOrder, parentId, fields, excludeItemTypes, filters, isFavorite, mediaTypes, imageTypes, sortBy, isPlayed, genres, officialRatings, tags, years, enableUserData, imageTypeLimit, enableImageTypes, person, personIds, personTypes, studios, artists, excludeArtistIds, artistIds, albumArtistIds, contributingArtistIds, albums, albumIds, ids, videoTypes, minOfficialRating, isLocked, isPlaceHolder, hasOfficialRating, collapseBoxSetItems, minWidth, minHeight, maxWidth, maxHeight, is3D, seriesStatus, nameStartsWithOrGreater, nameStartsWith, nameLessThan, studioIds, genreIds, enableTotalRecordCount, enableImages, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTrailers operation in TrailersApi.
 * @export
 * @interface TrailersApiGetTrailersRequest
 */
export interface TrailersApiGetTrailersRequest {
    /**
     * The user id.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly userId?: string

    /**
     * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly maxOfficialRating?: string

    /**
     * Optional filter by items with theme songs.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly hasThemeSong?: boolean

    /**
     * Optional filter by items with theme videos.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly hasThemeVideo?: boolean

    /**
     * Optional filter by items with subtitles.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly hasSubtitles?: boolean

    /**
     * Optional filter by items with special features.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly hasSpecialFeature?: boolean

    /**
     * Optional filter by items with trailers.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly hasTrailer?: boolean

    /**
     * Optional. Return items that are siblings of a supplied item.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly adjacentTo?: string

    /**
     * Optional filter by parent index number.
     * @type {number}
     * @memberof TrailersApiGetTrailers
     */
    readonly parentIndexNumber?: number

    /**
     * Optional filter by items that have or do not have a parental rating.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly hasParentalRating?: boolean

    /**
     * Optional filter by items that are HD or not.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly isHd?: boolean

    /**
     * Optional filter by items that are 4K or not.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly is4K?: boolean

    /**
     * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly locationTypes?: string

    /**
     * Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly excludeLocationTypes?: string

    /**
     * Optional filter by items that are missing episodes or not.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly isMissing?: boolean

    /**
     * Optional filter by items that are unaired episodes or not.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly isUnaired?: boolean

    /**
     * Optional filter by minimum community rating.
     * @type {number}
     * @memberof TrailersApiGetTrailers
     */
    readonly minCommunityRating?: number

    /**
     * Optional filter by minimum critic rating.
     * @type {number}
     * @memberof TrailersApiGetTrailers
     */
    readonly minCriticRating?: number

    /**
     * Optional. The minimum premiere date. Format &#x3D; ISO.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly minPremiereDate?: string

    /**
     * Optional. The minimum last saved date. Format &#x3D; ISO.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly minDateLastSaved?: string

    /**
     * Optional. The minimum last saved date for the current user. Format &#x3D; ISO.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly minDateLastSavedForUser?: string

    /**
     * Optional. The maximum premiere date. Format &#x3D; ISO.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly maxPremiereDate?: string

    /**
     * Optional filter by items that have an overview or not.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly hasOverview?: boolean

    /**
     * Optional filter by items that have an imdb id or not.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly hasImdbId?: boolean

    /**
     * Optional filter by items that have a tmdb id or not.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly hasTmdbId?: boolean

    /**
     * Optional filter by items that have a tvdb id or not.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly hasTvdbId?: boolean

    /**
     * Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly excludeItemIds?: string

    /**
     * Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @type {number}
     * @memberof TrailersApiGetTrailers
     */
    readonly startIndex?: number

    /**
     * Optional. The maximum number of records to return.
     * @type {number}
     * @memberof TrailersApiGetTrailers
     */
    readonly limit?: number

    /**
     * When searching within folders, this determines whether or not the search will be recursive. true/false.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly recursive?: boolean

    /**
     * Optional. Filter based on a search term.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly searchTerm?: string

    /**
     * Sort Order - Ascending,Descending.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly sortOrder?: string

    /**
     * Specify this to localize the search to a specific item or folder. Omit to use the root.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly parentId?: string

    /**
     * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly fields?: string

    /**
     * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly excludeItemTypes?: string

    /**
     * Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly filters?: string

    /**
     * Optional filter by items that are marked as favorite, or not.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly isFavorite?: boolean

    /**
     * Optional filter by MediaType. Allows multiple, comma delimited.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly mediaTypes?: string

    /**
     * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly imageTypes?: string

    /**
     * Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly sortBy?: string

    /**
     * Optional filter by items that are played, or not.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly isPlayed?: boolean

    /**
     * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly genres?: string

    /**
     * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly officialRatings?: string

    /**
     * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly tags?: string

    /**
     * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly years?: string

    /**
     * Optional, include user data.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly enableUserData?: boolean

    /**
     * Optional, the max number of images to return, per image type.
     * @type {number}
     * @memberof TrailersApiGetTrailers
     */
    readonly imageTypeLimit?: number

    /**
     * Optional. The image types to include in the output.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly enableImageTypes?: string

    /**
     * Optional. If specified, results will be filtered to include only those containing the specified person.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly person?: string

    /**
     * Optional. If specified, results will be filtered to include only those containing the specified person id.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly personIds?: string

    /**
     * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly personTypes?: string

    /**
     * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly studios?: string

    /**
     * Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly artists?: string

    /**
     * Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly excludeArtistIds?: string

    /**
     * Optional. If specified, results will be filtered to include only those containing the specified artist id.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly artistIds?: string

    /**
     * Optional. If specified, results will be filtered to include only those containing the specified album artist id.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly albumArtistIds?: string

    /**
     * Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly contributingArtistIds?: string

    /**
     * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly albums?: string

    /**
     * Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly albumIds?: string

    /**
     * Optional. If specific items are needed, specify a list of item id\&#39;s to retrieve. This allows multiple, comma delimited.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly ids?: string

    /**
     * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly videoTypes?: string

    /**
     * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly minOfficialRating?: string

    /**
     * Optional filter by items that are locked.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly isLocked?: boolean

    /**
     * Optional filter by items that are placeholders.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly isPlaceHolder?: boolean

    /**
     * Optional filter by items that have official ratings.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly hasOfficialRating?: boolean

    /**
     * Whether or not to hide items behind their boxsets.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly collapseBoxSetItems?: boolean

    /**
     * Optional. Filter by the minimum width of the item.
     * @type {number}
     * @memberof TrailersApiGetTrailers
     */
    readonly minWidth?: number

    /**
     * Optional. Filter by the minimum height of the item.
     * @type {number}
     * @memberof TrailersApiGetTrailers
     */
    readonly minHeight?: number

    /**
     * Optional. Filter by the maximum width of the item.
     * @type {number}
     * @memberof TrailersApiGetTrailers
     */
    readonly maxWidth?: number

    /**
     * Optional. Filter by the maximum height of the item.
     * @type {number}
     * @memberof TrailersApiGetTrailers
     */
    readonly maxHeight?: number

    /**
     * Optional filter by items that are 3D, or not.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly is3D?: boolean

    /**
     * Optional filter by Series Status. Allows multiple, comma delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly seriesStatus?: string

    /**
     * Optional filter by items whose name is sorted equally or greater than a given input string.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly nameStartsWithOrGreater?: string

    /**
     * Optional filter by items whose name is sorted equally than a given input string.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly nameStartsWith?: string

    /**
     * Optional filter by items whose name is equally or lesser than a given input string.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly nameLessThan?: string

    /**
     * Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly studioIds?: string

    /**
     * Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimeted.
     * @type {string}
     * @memberof TrailersApiGetTrailers
     */
    readonly genreIds?: string

    /**
     * Optional. Enable the total record count.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly enableTotalRecordCount?: boolean

    /**
     * Optional, include image information in output.
     * @type {boolean}
     * @memberof TrailersApiGetTrailers
     */
    readonly enableImages?: boolean
}

/**
 * TrailersApi - object-oriented interface
 * @export
 * @class TrailersApi
 * @extends {BaseAPI}
 */
export class TrailersApi extends BaseAPI {
    /**
     * 
     * @summary Finds movies and trailers similar to a given trailer.
     * @param {TrailersApiGetTrailersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrailersApi
     */
    public getTrailers(requestParameters: TrailersApiGetTrailersRequest = {}, options?: any) {
        return TrailersApiFp(this.configuration).getTrailers(requestParameters.userId, requestParameters.maxOfficialRating, requestParameters.hasThemeSong, requestParameters.hasThemeVideo, requestParameters.hasSubtitles, requestParameters.hasSpecialFeature, requestParameters.hasTrailer, requestParameters.adjacentTo, requestParameters.parentIndexNumber, requestParameters.hasParentalRating, requestParameters.isHd, requestParameters.is4K, requestParameters.locationTypes, requestParameters.excludeLocationTypes, requestParameters.isMissing, requestParameters.isUnaired, requestParameters.minCommunityRating, requestParameters.minCriticRating, requestParameters.minPremiereDate, requestParameters.minDateLastSaved, requestParameters.minDateLastSavedForUser, requestParameters.maxPremiereDate, requestParameters.hasOverview, requestParameters.hasImdbId, requestParameters.hasTmdbId, requestParameters.hasTvdbId, requestParameters.excludeItemIds, requestParameters.startIndex, requestParameters.limit, requestParameters.recursive, requestParameters.searchTerm, requestParameters.sortOrder, requestParameters.parentId, requestParameters.fields, requestParameters.excludeItemTypes, requestParameters.filters, requestParameters.isFavorite, requestParameters.mediaTypes, requestParameters.imageTypes, requestParameters.sortBy, requestParameters.isPlayed, requestParameters.genres, requestParameters.officialRatings, requestParameters.tags, requestParameters.years, requestParameters.enableUserData, requestParameters.imageTypeLimit, requestParameters.enableImageTypes, requestParameters.person, requestParameters.personIds, requestParameters.personTypes, requestParameters.studios, requestParameters.artists, requestParameters.excludeArtistIds, requestParameters.artistIds, requestParameters.albumArtistIds, requestParameters.contributingArtistIds, requestParameters.albums, requestParameters.albumIds, requestParameters.ids, requestParameters.videoTypes, requestParameters.minOfficialRating, requestParameters.isLocked, requestParameters.isPlaceHolder, requestParameters.hasOfficialRating, requestParameters.collapseBoxSetItems, requestParameters.minWidth, requestParameters.minHeight, requestParameters.maxWidth, requestParameters.maxHeight, requestParameters.is3D, requestParameters.seriesStatus, requestParameters.nameStartsWithOrGreater, requestParameters.nameStartsWith, requestParameters.nameLessThan, requestParameters.studioIds, requestParameters.genreIds, requestParameters.enableTotalRecordCount, requestParameters.enableImages, options).then((request) => request(this.axios, this.basePath));
    }
}
